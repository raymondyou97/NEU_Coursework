                       HOMEWORK 3
	       DEADLINE: Tuesday, Jan. 30

For homework 3, you must write a "realistic" program in assembly.
The program is the C program:  hw3-insertionsort.c
in the course directory.
You can test it via:  gcc hw3-insertionsort.c; ./a.out

EXTRA CREDIT:
> For extra credit, you may choose to implement quicksort.
> See hw3-quicksort.c for the example.   In this case, you will
> not obtain the extra credit, unless your quicksort implementation
> is near perfect (homework grade of 97 or higher).  If you earn
> the extra credit, it will take the form that I will drop your
> lowest homework score, and replace that by a score of 100.
> 
> I have created a special submit script for the extra credit assignment:
>   /course/cs3650/homework/submit-cs3650-hw3-extra-credit
> To get the extra credit, your quicksort must fully work, with not
> even small bugs.
> 
> In order to be safe, please also do the standard insertionsort homework.
> Otherwise, if you don't produce a fully workin quicksort and if you haven't
> done insertionsort, you will have a 0 for hw3.

In addition, you must include each line of the C source code as
a comment just before the corresponding assembly code.
For example:
 # x = y + z;
 add $t4, $t2, $t1
 # x -= 2;
 sub $t4, $t4, 2

You must submit (using the on-line submit script) your assembly source.
You must submit it as a .tar.gz file.
To submit on-line, login to the UNIX system and do:
    /course/cs3650/homework/submit-cs3650-hw3  hw3.tar.gz
(assuming that your assembly program is in hw3.s, inside hw3.tar.gz)
Recall that to create a tar file, you can do (for example):
  mkdir hw3
  cp hw3.s hw3
  tar zcvf hw3.tar.gz ./hw3
[ Note that in hw3.s, the filetype .s is a traditional name for assembly files.
  Some of you may prefer hw3.asm, from Mars.  Both filetypes are fine. ]
For more information, see 'man mkdir', 'man tar', etc.

======================================================================
Please use the MARS simulator, and especially its singlestep/backstep
feature.  This will make your debugging much easier.

Note that MARS supports various print commands as system calls
(using syscall) (see Figure A.9.1, p. A-44 in the textbook).

======================================================================
INITIALIZATION OF DATA STRUCTURES:

Note also that for this C program, you will need to initialize the
array of strings:  {"Joe", ...}
To do so, you will need to use the assembler directives on
 pp. A-47 -- A-49.
The most useful directives for this are:  .asciiz  and  .align
For example:
           .align 5  # in our example, names start on a 32-byte boundary
dataName:  .asciiz "Joe"
           .align 5
           .asciiz "Jenny"
           ...
Then, array points to "Joe", array+32 points to "Jenny", etc.

Once you have done this, you can then create the array, dataName[],
in hw3-insertionsort.c or hw3-quicksort.c.  Rather than manipulate
'dataName', an array of strings, it is better to manipulate 'dataAddr',
an array of pointers to strings.  You should represent dataAddr[] as an array
of addresses (pointers), where each address points to a string.
So, you will initialize data as:

          .align 2  # addresses should start on a word boundary
dataAddr: .space 64 # 16 pointers to strings: 16*4 = 64

This .space directive will allocate space, but it will not
initialize the space.  Later, you must write code inside main()
that will initialize the space so that each word starting at 'dataAddr'
points to the address of the next string found at 'dataName'.

======================================================================
LOAD/STORE INSTRUCTIONS IN ASSEMBLY:

Note these four variations of load/store:
  sw $t1, 4($sp) # store #t1 into RAM
  lw $t1, 4($sp) # load into #t1 from RAM
  li $t1, $t2    # load immediate data into #t1 ($t2 should be data)
  la $t1, $t2    # load address into #t1 ($t2 should be address)
