-- MySQL Script generated by MySQL Workbench
-- Mon Apr 16 22:02:08 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema WardrobeApp
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `WardrobeApp` ;

-- -----------------------------------------------------
-- Schema WardrobeApp
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `WardrobeApp` DEFAULT CHARACTER SET utf8 ;
USE `WardrobeApp` ;

-- -----------------------------------------------------
-- Table `WardrobeApp`.`User`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `WardrobeApp`.`User` ;

CREATE TABLE IF NOT EXISTS `WardrobeApp`.`User` (
  `UserID` INT NOT NULL AUTO_INCREMENT,
  `FName` VARCHAR(45) NOT NULL,
  `LName` VARCHAR(45) NOT NULL,
  `Age` INT NOT NULL,
  `Gender` VARCHAR(45) NOT NULL,
  `EmailAddress` VARCHAR(100) NOT NULL,
  `Username` VARCHAR(200) NOT NULL,
  `Password` VARCHAR(200) NOT NULL,
  PRIMARY KEY (`UserID`),
  UNIQUE INDEX `UserID_UNIQUE` (`UserID` ASC),
  UNIQUE INDEX `Username_UNIQUE` (`Username` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `WardrobeApp`.`Outfit`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `WardrobeApp`.`Outfit` ;

CREATE TABLE IF NOT EXISTS `WardrobeApp`.`Outfit` (
  `OutfitID` INT NOT NULL AUTO_INCREMENT,
  `UserID` INT NOT NULL,
  `OutfitDescription` VARCHAR(45) NULL,
  INDEX `fk_userID_idx` (`UserID` ASC),
  PRIMARY KEY (`OutfitID`),
  CONSTRAINT `fk_userID`
    FOREIGN KEY (`UserID`)
    REFERENCES `WardrobeApp`.`User` (`UserID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `WardrobeApp`.`ArticleType`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `WardrobeApp`.`ArticleType` ;

CREATE TABLE IF NOT EXISTS `WardrobeApp`.`ArticleType` (
  `TypeID` INT NOT NULL AUTO_INCREMENT,
  `Type` VARCHAR(45) NOT NULL,
  `TypeDescription` VARCHAR(45) NULL,
  PRIMARY KEY (`TypeID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `WardrobeApp`.`OutfitArticle`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `WardrobeApp`.`OutfitArticle` ;

CREATE TABLE IF NOT EXISTS `WardrobeApp`.`OutfitArticle` (
  `ArticleID` INT NOT NULL AUTO_INCREMENT,
  `ArticleType` INT NOT NULL,
  `Size` VARCHAR(45) NULL,
  `Color` VARCHAR(45) NULL,
  `Brand` VARCHAR(45) NULL,
  `Material` VARCHAR(45) NULL,
  `Price` INT NULL,
  `UserID` INT NOT NULL,
  `ArticleDescription` VARCHAR(45) NULL,
  `DatePurchased` DATE NULL,
  PRIMARY KEY (`ArticleID`, `ArticleType`),
  INDEX `fk_typeID_idx` (`ArticleType` ASC),
  INDEX `fk_userID_idx` (`UserID` ASC),
  CONSTRAINT `fk_typeID`
    FOREIGN KEY (`ArticleType`)
    REFERENCES `WardrobeApp`.`ArticleType` (`TypeID`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE,
  CONSTRAINT `fk_userID2`
    FOREIGN KEY (`UserID`)
    REFERENCES `WardrobeApp`.`User` (`UserID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `WardrobeApp`.`OutfitToArticle`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `WardrobeApp`.`OutfitToArticle` ;

CREATE TABLE IF NOT EXISTS `WardrobeApp`.`OutfitToArticle` (
  `OutfitID` INT NOT NULL,
  `ArticleID` INT NOT NULL,
  PRIMARY KEY (`OutfitID`, `ArticleID`),
  INDEX `fk_articleID_idx` (`ArticleID` ASC),
  CONSTRAINT `fk_outfitID`
    FOREIGN KEY (`OutfitID`)
    REFERENCES `WardrobeApp`.`Outfit` (`OutfitID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_articleID`
    FOREIGN KEY (`ArticleID`)
    REFERENCES `WardrobeApp`.`OutfitArticle` (`ArticleID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

#----------------------------Stored Functions---------------------------------
DELIMITER ;
DROP FUNCTION IF EXISTS getNumOutfits;
DELIMITER $$
CREATE FUNCTION getNumOutfits(inUserID INT)
RETURNS INT
BEGIN

DECLARE outfit_count INT;

SELECT COUNT(*) INTO outfit_count FROM WardrobeApp.Outfit WHERE UserID = inUserID;
RETURN outfit_count;
END$$
DELIMITER ;

DROP FUNCTION IF EXISTS getNumberOfArticlesForUser;
DELIMITER $$
CREATE FUNCTION getNumberOfArticlesForUser(inUserID INT)
RETURNS INT
BEGIN

DECLARE article_count INT;

SELECT COUNT(*) INTO article_count FROM WardrobeApp.OutfitArticle WHERE inUserID = UserID;
RETURN article_count;

END$$
DELIMITER ;

DELIMITER ;
DROP FUNCTION IF EXISTS getUsername;
DELIMITER $$
CREATE FUNCTION getUsername(inUserID INT)
RETURNS VARCHAR(200)
BEGIN

DECLARE outUsername VARCHAR(200);

SELECT Username INTO outUsername FROM WardrobeApp.User WHERE inUserID = UserID;

RETURN outUsername;

END$$
DELIMITER ;

DELIMITER ;
DROP FUNCTION IF EXISTS getFullName;
DELIMITER $$
CREATE FUNCTION getFullName(inUserID INT)
RETURNS VARCHAR(90)
BEGIN

DECLARE outName VARCHAR(90);

SELECT CONCAT(FName, " ", LName)
INTO outName
FROM WardrobeApp.User
WHERE inUserID = UserID;

RETURN outName;

END$$
DELIMITER ;

DROP FUNCTION IF EXISTS getAge;
DELIMITER $$
CREATE FUNCTION getAge(inUserID INT)
RETURNS INT
BEGIN

DECLARE outAge INT;

SELECT Age
INTO outAge
FROM WardrobeApp.User
WHERE inUserID = UserID;

RETURN outAge;

END$$
DELIMITER ;

DROP FUNCTION IF EXISTS getGender;
DELIMITER $$
CREATE FUNCTION getGender(inUserID INT)
RETURNS VARCHAR(45)
BEGIN

DECLARE outGender VARCHAR(45);

SELECT Gender
INTO outGender
FROM WardrobeApp.User
WHERE inUserID = UserID;

RETURN outGender;

END$$
DELIMITER ;

DROP FUNCTION IF EXISTS getEmailAddress;
DELIMITER $$
CREATE FUNCTION getEmailAddress(inUserID INT)
RETURNS VARCHAR(100)
BEGIN

DECLARE outEmail VARCHAR(100);

SELECT EmailAddress
INTO outEmail
FROM WardrobeApp.User
WHERE inUserID = UserID;

RETURN outEmail;

END$$
DELIMITER ;

DELIMITER ;
DROP FUNCTION IF EXISTS getTypeIDFromDescription;
DELIMITER $$
CREATE FUNCTION getTypeIDFromDescription(inType VARCHAR(45))
RETURNS INT
BEGIN

DECLARE outTypeID INT;

SELECT TypeID INTO outTypeID
FROM WardrobeApp.ArticleType WHERE Type = inType LIMIT 1;

RETURN outTypeID;

END$$
DELIMITER ;

DROP FUNCTION IF EXISTS CheckIfUsernameExists;
DELIMITER $$
CREATE FUNCTION CheckIfUsernameExists(inUsername VARCHAR(200))
RETURNS INT
BEGIN

DECLARE username_exists INT;

SELECT (COUNT(*) = 1)
INTO username_exists
FROM WardrobeApp.User
WHERE inUsername = Username;

RETURN username_exists;

END$$
DELIMITER ;

DELIMITER ;
DROP FUNCTION IF EXISTS getOutfitDescription;
DELIMITER $$
CREATE FUNCTION getOutfitDescription(inOutfitID INT)
RETURNS VARCHAR(45)
BEGIN

DECLARE outOutfitDescription VARCHAR(45);

SELECT OutfitDescription INTO outOutfitDescription
FROM Outfit WHERE OutfitID = inOutfitID;

RETURN outOutfitDescription;

END$$
DELIMITER ;

DROP FUNCTION IF EXISTS getNumberOfArticles;
DELIMITER $$
CREATE FUNCTION getNumberOfArticles(inOutfitID INT)
RETURNS INT
BEGIN

DECLARE num INT;

SELECT COUNT(*) INTO num FROM OutfitToArticle WHERE OutfitID = inOutfitID;

RETURN num;

END$$
DELIMITER ;

DROP FUNCTION IF EXISTS OutfitHasArticle;
DELIMITER $$
CREATE FUNCTION OutfitHasArticle(inOutfitID INT, inArticleID INT)
RETURNS INT
BEGIN

DECLARE num INT;

SELECT (COUNT(*) = 1) INTO num FROM OutfitToArticle WHERE OutfitID = inOutfitID AND ArticleID = inArticleID;

RETURN num;

END$$
DELIMITER ;

DROP FUNCTION IF EXISTS getArticleSize;
DELIMITER $$
CREATE FUNCTION getArticleSize(inArticleID INT)
RETURNS VARCHAR(45)
BEGIN

DECLARE result VARCHAR(45);

SELECT Size INTO result FROM OutfitArticle WHERE ArticleID = inArticleID;

RETURN result;

END$$
DELIMITER ;

DROP FUNCTION IF EXISTS getArticleColor;
DELIMITER $$
CREATE FUNCTION getArticleColor(inArticleID INT)
RETURNS VARCHAR(45)
BEGIN

DECLARE result VARCHAR(45);

SELECT Color INTO result FROM OutfitArticle WHERE ArticleID = inArticleID;

RETURN result;

END$$
DELIMITER ;

DROP FUNCTION IF EXISTS getArticleBrand;
DELIMITER $$
CREATE FUNCTION getArticleBrand(inArticleID INT)
RETURNS VARCHAR(45)
BEGIN

DECLARE result VARCHAR(45);

SELECT Brand INTO result FROM OutfitArticle WHERE ArticleID = inArticleID;

RETURN result;

END$$
DELIMITER ;

DROP FUNCTION IF EXISTS getArticleMaterial;
DELIMITER $$
CREATE FUNCTION getArticleMaterial(inArticleID INT)
RETURNS VARCHAR(45)
BEGIN

DECLARE result VARCHAR(45);

SELECT Material INTO result FROM OutfitArticle WHERE ArticleID = inArticleID;

RETURN result;

END$$
DELIMITER ;

DROP FUNCTION IF EXISTS getArticlePrice;
DELIMITER $$
CREATE FUNCTION getArticlePrice(inArticleID INT)
RETURNS INT
BEGIN

DECLARE result INT;

SELECT Price INTO result FROM OutfitArticle WHERE ArticleID = inArticleID;

RETURN result;

END$$
DELIMITER ;

DROP FUNCTION IF EXISTS getArticleDescription;
DELIMITER $$
CREATE FUNCTION getArticleDescription(inArticleID INT)
RETURNS VARCHAR(45)
BEGIN

DECLARE result VARCHAR(45);

SELECT ArticleDescription INTO result FROM OutfitArticle WHERE ArticleID = inArticleID;

RETURN result;

END$$
DELIMITER ;

DROP FUNCTION IF EXISTS getArticleDate;
DELIMITER $$
CREATE FUNCTION getArticleDate(inArticleID INT)
RETURNS VARCHAR(45)
BEGIN

DECLARE result VARCHAR(45);

SELECT DatePurchased INTO result FROM OutfitArticle WHERE ArticleID = inArticleID;

RETURN result;

END$$
DELIMITER ;

DROP FUNCTION IF EXISTS getArticleType;
DELIMITER $$
CREATE FUNCTION getArticleType(inArticleID INT)
RETURNS INT
BEGIN

DECLARE result INT;

SELECT ArticleType INTO result FROM OutfitArticle WHERE ArticleID = inArticleID;

RETURN result;

END$$
DELIMITER ;

DROP FUNCTION IF EXISTS getTypeFromArticleType;
DELIMITER $$
CREATE FUNCTION getTypeFromArticleType(inTypeID INT)
RETURNS VARCHAR(45)
BEGIN

DECLARE result VARCHAR(45);

SELECT Type INTO result FROM ArticleType WHERE TypeID = inTypeID;

RETURN result;

END$$
DELIMITER ;

DROP FUNCTION IF EXISTS getTypeDescriptionFromArticleType;
DELIMITER $$
CREATE FUNCTION getTypeDescriptionFromArticleType(inTypeID INT)
RETURNS VARCHAR(45)
BEGIN

DECLARE result VARCHAR(45);

SELECT TypeDescription INTO result FROM ArticleType WHERE TypeID = inTypeID;

RETURN result;

END$$
DELIMITER ;

DROP FUNCTION IF EXISTS getTypeIndex;
DELIMITER $$
CREATE FUNCTION getTypeIndex()
RETURNS INT
BEGIN

DECLARE result INT;

SELECT TypeID INTO result FROM ArticleType ORDER BY TypeID DESC LIMIT 1;
RETURN result;

END$$
DELIMITER ;
#----------------------------Stored Procedures---------------------------------
DROP PROCEDURE IF EXISTS getOutfitIDs;
DELIMITER $$
CREATE PROCEDURE getOutfitIDs(inUserID INT)
BEGIN

SELECT OutfitID FROM Outfit WHERE UserID = inUserID;

END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS getArticleIDs;
DELIMITER $$
CREATE PROCEDURE getArticleIDs(inUserID INT)
BEGIN

SELECT ArticleID FROM OutfitArticle WHERE UserID = inUserID;

END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS getArticleIDsWithTypeID;
DELIMITER $$
CREATE PROCEDURE getArticleIDsWithTypeID(inTypeID INT)
BEGIN

SELECT ArticleID From OutfitArticle WHERE ArticleType = inTypeID;

END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS getArticleIDPriceRange;
DELIMITER $$
CREATE PROCEDURE getArticleIDPriceRange(lowerBound INT, upperBound INT)
BEGIN

SELECT ArticleID From OutfitArticle WHERE Price >= lowerBound AND Price <= upperBound;

END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS getUserIDAndPassword;
DELIMITER $$
CREATE PROCEDURE getUserIDAndPassword(inUsername VARCHAR(200))
BEGIN

SELECT UserID, Password FROM User WHERE Username = inUsername;

END$$
DELIMITER ;

DELIMITER ;
DROP PROCEDURE IF EXISTS registerAccount;
DELIMITER $$
CREATE PROCEDURE registerAccount(inFName VARCHAR(45), inLName VARCHAR(45), inAge INT, 
inGender VARCHAR(45), inUsername VARCHAR(200), inPassword VARCHAR(200), inEmailAddress VARCHAR(100))
BEGIN

INSERT INTO User (FName, LName, age, gender, username, password, emailaddress) 
VALUE (inFName, inLName, inAge, inGender, inUsername, inPassword, inEmailAddress);

END$$
DELIMITER ;

DELIMITER ;
DROP PROCEDURE IF EXISTS addOutfit;
DELIMITER $$
CREATE PROCEDURE addOutfit(inUserID INT, inOutfitDescription VARCHAR(45))
BEGIN

INSERT INTO Outfit (UserID, OutfitDescription) VALUE (inUserID, inOutfitDescription);

END$$
DELIMITER ;

DELIMITER ;
DROP PROCEDURE IF EXISTS addType;
DELIMITER $$
CREATE PROCEDURE addType(inType VARCHAR(45), inTypeDescription VARCHAR(45))
BEGIN

INSERT INTO ArticleType (Type, TypeDescription) VALUE (inType, inTypeDescription);

END$$
DELIMITER ;

DELIMITER ;
DROP PROCEDURE IF EXISTS addArticle;
DELIMITER $$
CREATE PROCEDURE addArticle(inArticleType INT, inSize VARCHAR(45), inColor VARCHAR(45), 
inBrand VARCHAR(45), inMaterial VARCHAR(45), inPrice INT, inUserID INT, inArticleDescription VARCHAR(45), inDatePurchased DATE)
BEGIN

INSERT INTO OutfitArticle (ArticleType, Size, Color, Brand, Material, Price, UserID, ArticleDescription, DatePurchased) 
VALUE (inArticleType, inSize, inColor, inBrand, inMaterial, inPrice, inUserID, inArticleDescription, inDatePurchased);

END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS addArticleToOutfit;
DELIMITER $$
CREATE PROCEDURE addArticleToOutfit(inOutfitID INT, inArticleID INT)
BEGIN

INSERT INTO OutfitToArticle (OutfitID, ArticleID) VALUE (inOutfitID, inArticleID);

END$$
DELIMITER ;

DELIMITER ;
DROP PROCEDURE IF EXISTS removeArticleToOutfit;
DELIMITER $$
CREATE PROCEDURE removeArticleToOutfit(inOutfitID INT, inArticleID INT)
BEGIN

DELETE FROM OutfitToArticle WHERE ArticleID = inArticleID AND OutfitID = inOutfitID;

END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS updateDescription;
DELIMITER $$
CREATE PROCEDURE updateDescription(inOutfitID INT, inDescription VARCHAR(45))
BEGIN

UPDATE Outfit SET OutfitDescription = inDescription WHERE OutfitID = inOutfitID;

END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS deleteOutfit;
DELIMITER $$
CREATE PROCEDURE deleteOutfit(inOutfitID INT)
BEGIN

DELETE FROM Outfit 
WHERE OutfitID = inOutfitID;

END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS getAllArticleIDsInOutfit;
DELIMITER $$
CREATE PROCEDURE getAllArticleIDsInOutfit(inOutfitID INT)
BEGIN

SELECT ArticleID FROM OutfitToArticle WHERE OutfitID = inOutfitID;

END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS getAllArticleIDsNotInOutfit;
DELIMITER $$
CREATE PROCEDURE getAllArticleIDsNotInOutfit(inOutfitID INT)
BEGIN

SELECT ArticleID FROM OutfitArticle WHERE ArticleID NOT IN 
(SELECT ArticleID FROM OutfitToArticle WHERE OutfitID = inOutfitID);

END$$
DELIMITER ;

DELIMITER ;
DROP PROCEDURE IF EXISTS deleteArticle;
DELIMITER $$
CREATE PROCEDURE deleteArticle(inArticleID INT)
BEGIN

DELETE FROM OutfitArticle WHERE ArticleID = inArticleID;

END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS UpdateTypeFirst;
DELIMITER $$
CREATE PROCEDURE UpdateTypeFirst(inType VARCHAR(45), inTypeDescription VARCHAR(45), inTypeID INT)
BEGIN

UPDATE ArticleType SET Type = inType, TypeDescription = inTypeDescription WHERE TypeID = inTypeID;

END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS UpdateOutfitArticle;
DELIMITER $$
CREATE PROCEDURE UpdateOutfitArticle(inSize VARCHAR(45), inColor VARCHAR(45), inBrand VARCHAR(45), inMaterial 
VARCHAR(45), inPrice INT, inArticleDescription VARCHAR(45), inDatePurchased DATE, inArticleID INT)
BEGIN

UPDATE OutfitArticle SET Size = inSize, Color = inColor, Brand = inBrand, Material = inMaterial, Price = inPrice, 
ArticleDescription = inArticleDescription, DatePurchased = inDatePurchased WHERE ArticleID = inArticleID;

END$$
DELIMITER ;

#----------------------------Stored Triggers---------------------------------
DELIMITER ;
DROP TRIGGER if EXISTS outfitToArticle_after_delete_on_outfit;
 DELIMITER $$
 CREATE TRIGGER outfitToArticle_after_delete_on_outfit
 AFTER DELETE ON Outfit
 FOR EACH ROW
 BEGIN
 
 DELETE FROM OutfitToArticle
 WHERE OutfitToArticle.OutfitID = OLD.OutfitID;

 END$$
 
 DELIMITER ;
DROP TRIGGER if EXISTS outfitToArticle_after_delete_on_outfitArticle;
 DELIMITER $$
 CREATE TRIGGER outfitToArticle_after_delete_on_outfitArticle
 AFTER DELETE ON OutfitArticle
 FOR EACH ROW
 BEGIN
 
 DELETE FROM OutfitToArticle
 WHERE OutfitToArticle.ArticleID = OLD.ArticleID;

 END$$


