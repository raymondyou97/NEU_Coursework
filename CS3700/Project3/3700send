#!/usr/bin/env python3

import json
import sys
from datetime import datetime
from socket import socket, AF_INET, SOCK_DGRAM
from struct import Struct

# for logging to stdout
def log_normal(string):
    # redirect print output to stdout
    # this should be sys.stdout but dunno why its not working. fk it for now
    sys.stderr.write(datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")
    sys.stderr.flush()

# for logging to stderr
def log_error(string):
    # redirect print output to stderr
    sys.stderr.write(datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")
    sys.stderr.flush()

# connect to socket and setup attributes
def setup_socket():
    my_socket = socket(AF_INET, SOCK_DGRAM)
    my_socket.settimeout(1.5)
    return my_socket

# 1500 byte Ethernet MTU minus overhead
packet_data_length = 1500 - 100

# struct of int, char[], boolean, int
packet_struct = Struct("I {}s ? I".format(packet_data_length))

# mapping of packet sequences
sequence_packet_map = {}

# starting sequence num
sequence_num = 0

# our window size
window_size = 100

# current packet data
packet_data = None

# acks already sent out
acks_sent = []

# ip/port info for geting the port the receiver opens up
ip_port = sys.argv[1]
udp_ip = ip_port[0:ip_port.find(":")]
udp_port = int(ip_port[ip_port.find(":")+1:])
dest = (udp_ip, udp_port)

# Set up the socket
my_socket = setup_socket()

# Continually pull data from STDIN
def read_stdin():
    final_data = ""
    while True:
        intake = sys.stdin.read(packet_data_length)
        if len(intake) > 1:
            final_data += intake
        else:
            return final_data

# sends the packet
def send_packet():
    global packet_data # to allow mutation in a local context
    # iterate through current window
    for w in range(window_size):
        data = packet_data[0:packet_data_length]

        if len(data) > 0:
            global sequence_num # to allow mutation in a local context
            packet_data = packet_data[packet_data_length:len(packet_data)]
            packet = packet_struct.pack(sequence_num, data, False, window_size)

            sequence_num += len(data)
            if my_socket.sendto(packet, dest) < len(packet):
                log_error("[error] unable to fully send packet")
            else:
                global sequence_packet_map # to allow mutation in a local context
                tupl = (packet, len(data))
                sequence_packet_map[sequence_num] = tupl
                log_normal("[send data] {} ({})".format(str(sequence_num), str(len(data))))
        else:
            if w == 0:
                return False
    return True

# resends the packet based on sequence num
def resend_packet(sequence):
    global sequence_packet_map # to allow mutation in a local context
    (data, size) = sequence_packet_map[sequence]
    if my_socket.sendto(data, dest) < len(data):
        log_error("[error] unable to fully send packet")
    else:
        log_normal("[send data] {} ({})".format(str(sequence), str(size)))

# shift our window size to the right
def shift_window():
    global window_size # to allow mutation in a local context
    # log_normal("[info] shifting window from {} to {}".format(window_size, window_size + 1))
    window_size += 1
    # log_normal("[info] window shifted from {} to {}".format(window_size, window_size + 1))

# iterate through the window size to for prerequistes steps
def iterate_window(sequence_num):
    for w in range(window_size):
        # check if we need to add this sequence num to our target acks
        sequence_flag = (sequence_num not in target_acks) and (sequence_num not in acks_sent)
        if sequence_flag:
            target_acks.append(sequence_num)
        global sequence_packet_map # to allow mutation in a local context
        # get info for the current packet and previous packet
        packet = sequence_packet_map.get(sequence_num, None)
        previous_sequence = sequence_num - packet[1]
        previous_packet = sequence_packet_map.get(previous_sequence, None)
        # if previous packet fails, break out of window loop
        if not previous_packet:
            break
        sequence_num = previous_sequence
    return sequence_num

# send 'last termination packets' before ending gracefully
def final_attempt():
    attempts = 6
    for w in range(attempts):
        last_packet = packet_struct.pack(sequence_num, "", True, window_size)
        my_socket.sendto(last_packet, dest)

def closing_handler():
    # yolo send packets, some will make it right...?
    final_attempt()

    log_normal("[completed]")
    sys.exit(0)

# initialize the contiual loop that reads from STDIN
packet_data = read_stdin()

# first, send the first packet
send_packet()

# main loop where the 'sending logic' happens
while True:
    target_acks = []
    sequence_temp = iterate_window(sequence_num)
    while True:
        if len(target_acks) == 0:
            break
        result = None
        try:
            # receive data from the receiver
            result = my_socket.recvfrom(1500)
        except:
            # resend packets that weren't received by the receiver
            for sequence_temp in target_acks:
                resend_packet(sequence_temp)
            continue
        if result:
            (data, addr) = result
            try:
                decoded = json.loads(data)
                my_ack = decoded["ack"]
                # if ack has been received and acknowledged, we can conclude and clean this ack
                if my_ack in target_acks:
                    target_acks.remove(my_ack)
                    acks_sent.append(my_ack)
                    log_normal("[recv ack] {}".format(str(my_ack)))
            except (ValueError, KeyError, TypeError):
                log_error("[recv corrupt packet]")
        else:
            log_error("[error] timeout")
            sys.exit(-1)

    shift_window()

    # Try to send next packet; break if no more data
    success_or_nah = send_packet()
    if not success_or_nah:
        log_error("[error] packet failed to send")
        break

closing_handler()
